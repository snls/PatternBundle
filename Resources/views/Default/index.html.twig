{% extends 'base.html.twig' %}

{% block title %} Паттерны {% endblock %}
{% block body %}
    <h1>Список патернов</h1>
    <h2>1. Порождающие паттерны</h2>
    <p>Порождающие паттерны - паттерны проектирования абстрагирут процесс инстанцирования. Они помогут сделать систему независимой от способа создания, композиции и представления объектов. Паттерн, порождающие классы, использует наследование, чтобы варьировать инстанцируемый класс, а паттерн, порождающий объекты, делегирует инстанцирование другому объекту.</p>
    <p>Эти паттерны оказываются важными, когда система больше зависит от композиции объектов, чем от их наследования.</p>
    <p>Для порождающих паттернов актуальны две темы. Во-первых, эти патерны инкапсулируют знания о конкретных классах, которые применяются в системе. Во-вторых скрывают детали того, как эти классы создаются и стыкуются.</p>
    <h4> Список паттернов для изучения</h4>
    <ul>
        <li><a href="/pattern/factory_method">Factory Method</a></li>
        <li><a href="/pattern/prototype">Prototype</a></li>
    </ul>
    <h4> Список рассмотренных паттернов</h4>
    <ul>
        <li><a href="/pattern/singleton">Singleton</a></li>
        <li><a href="/pattern/abstract_factory">Abstract Factory</a></li>
        <li><a href="/pattern/builder">Builder</a></li>
    </ul>
    <h4>Выводы</h4>
    <p>...</p>

    <h2>2. Структурные паттерны</h2>
    <p>В структурных паттернах рассматривается вопрос о том, как из классов и объектов образуются более крупные структуры. Структурные паттерны уровня класса используют насследование для составления композиций из интерфейсов и реализаций.</p>
    <p>Простой пример - использование множественного наследования для объединения нескольких классов в один. В результате получается класс, обладающий свойствами всех своих родителей.</p>
    <h4>Список паттернов для осмотрения</h4>
    <p><a href="/pattern/adapter">Adapter</a></p>
    <p><a href="/pattern/bridge">Bridge</a></p>
    <p><a href="/pattern/composite">Composite</a></p>
    <p><a href="/pattern/decorator">Decorator</a></p>
    <p><a href="/pattern/facade">Facade</a></p>
    <p><a href="/pattern/flyweight">Flyweight</a></p>
    <p><a href="/pattern/proxy">Proxy</a></p>
    <h4>Выводы</h4>
    <p>...</p>
    <h4>Впечатление</h4>
    <p>...</p>

    <h2>3. Паттерны поведения</h2>
    <p>Паттерны поведения связанны с алгоритмами и распределением обязанностей между объектами. Руечь в них идет не только о самих объектах и классах, но и о типичных способах взаимодействий. Паттерны поведения характеризуют сложный поток управления, который трудно проследить во время выполнения программы. Внимание акцентировано не на потоке управления как таковом, а на связях между объектами.</p>
    <p>Используется наследование - чтобы распределить поведение между разными классами.</p>
    <p>В паттернах поведения уровеня объекта используется не наследование, а композиция. Нектороые из них описывают, как с помощью коопераций множество равноправных объектов справляется с задачей, котороя ни одному из них не под силу.</p>
    <h4>Список паттернов для осмотрения</h4>
    <p><a href="/pattern/chain_of_responsibility">Chain of Responsibility</a></p>
    <p><a href="/pattern/command">Command</a></p>
    <p><a href="/pattern/interpreter">Interpreter</a></p>
    <p><a href="/pattern/iterator">Iterator</a></p>
    <p><a href="/pattern/mediator">Mediator</a></p>
    <p><a href="/pattern/memento">Memento</a></p>
    <p><a href="/pattern/observer">Observer</a></p>
    <p><a href="/pattern/state">State</a></p>
    <p><a href="/pattern/strategy">Strategy</a></p>
    <p><a href="/pattern/template_method">Template Method</a></p>
    <p><a href="/pattern/visitor">Visitor</a></p>
    <h4>Выводы</h4>
    <p>...</p>
    <h4>Впечатление</h4>
    <p>...</p>
{% endblock %}
